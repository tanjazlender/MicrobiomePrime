summarise(PP_ID = paste0(PP_ID, collapse = ", ")) %>%
filter(., SeqID %in% seqIDs_samples_exceptions$SeqID) %>%
left_join(seqIDs_samples_exceptions) %>%
separate_rows(PP_ID, sep = ", ") %>%
separate_rows(Samples, sep = ", ") %>%
rename(Sample = Samples) %>%
left_join(relabund_tab_long_metadata) %>%
left_join(taxonomy_last_taxon) %>%
left_join(nsamples_per_source) %>%
group_by(PP_ID, Source, Nsamples, Sample) %>%
summarise(SeqIDs = paste0(SeqID, collapse = ", "),
Percent_abundance = round(sum(Percent_abundance), digits=4),
Taxonomy_exceptions = paste0(unique(Last_taxon),
collapse = ", ")) %>%
ungroup()
# See which samples excluded from specificity calculations were detected using the given primer pairs
pp_presence_exceptions <- abund_long_exceptions %>%
filter(Percent_abundance > 0) %>%
filter(Source %in% specificity_exception) %>%
left_join(nsamples_per_source) %>%
group_by(Source, PP_ID, Nsamples) %>%
summarise(N_positive_samples = length(unique(Sample)),
Positive_exceptions_samples = paste0(Sample, collapse = ", ")) %>%
mutate(Sensitivity2_detailed = paste0(Source, " (", N_positive_samples, "/",
Nsamples, ")")) %>%
group_by(PP_ID) %>%
summarise(Presence_exceptions_samples = paste0(Sensitivity2_detailed, collapse = ", "),
Positive_exceptions_samples = paste0(Source, " (",
Positive_exceptions_samples, ")",
collapse = ", "))
# Calculate relative abundances of markers within samples excluded from specificity calculations
pp_abundance_exceptions <- abund_long_exceptions %>%
filter(Percent_abundance > 0) %>%
filter(PP_ID %in% pp_specificity_sensitivity$PP_ID) %>%
group_by(PP_ID, Source, Nsamples) %>%
summarise(Percent_abundance_exceptions = round(mean(Percent_abundance), digits = 4),
Percent_abundance_exceptions_SD = round(sd(Percent_abundance), digits = 4)) %>%
group_by(PP_ID) %>%
summarise(Percent_abundance_exceptions_detailed = paste0(Source, " (",
Percent_abundance_exceptions, "+",
Percent_abundance_exceptions_SD, ")",
collapse = ", "))
# Assign taxonomy to each marker found in specificity exception samples
pp_taxonomy_exceptions <- abund_long_exceptions %>%
filter(PP_ID %in% pp_specificity_sensitivity$PP_ID) %>%
separate_rows(Taxonomy_exceptions, sep = ", ") %>%
group_by(PP_ID) %>%
summarise(Taxonomy_exceptions = paste0(unique(sort(Taxonomy_exceptions)), collapse = ", "))
# Create a joined table
pp_exceptions_join <- select(pp_specificity_sensitivity, c("PP_ID")) %>%
mutate(Exceptions = paste0(specificity_exception)) %>%
left_join(pp_presence_exceptions) %>%
left_join(pp_abundance_exceptions) %>%
left_join(pp_taxonomy_exceptions)
} else {
pp_exceptions_join <- select(pp_specificity_sensitivity, c("PP_ID")) %>%
mutate(Exceptions = NA,
Presence_exceptions_samples = NA,
Positive_exceptions_samples = NA,
Percent_abundance_exceptions_detailed = NA,
Taxonomy_exceptions = NA)
}
# Call the garbage collector to free up unused memory
gc()
############# Write sequence IDs detected by best primer pairs ###############
# Write out all detected sequences
pp_all_detected_seqIDs <- tntblast_results_filt %>%
filter(., PP_ID %in% pp_specificity_sensitivity$PP_ID) %>%
group_by(PP_ID) %>%
summarise(SeqIDs_all = paste0(SeqID, collapse = ", "))
# Write sequence IDs that are detected by best primer pairs in target samples
pp_seqIDs_target_separated <- select(abund_long_target, c("PP_ID", "SeqIDs")) %>%
filter(PP_ID %in% pp_specificity_sensitivity$PP_ID) %>%
separate_rows(SeqIDs, sep = ", ") %>%
distinct(PP_ID, SeqIDs)
pp_seqIDs_target <- pp_seqIDs_target_separated %>%
group_by(PP_ID) %>%
summarise(SeqIDs_target = paste(SeqIDs[order(as.numeric(str_extract(SeqIDs, "\\d+")))], collapse = ", "),
N_seqIDs_target = length(unique(SeqIDs)))
pp_seqIDs_nontarget_separated <- select(abund_long_nontarget, c("PP_ID", "SeqIDs")) %>%
filter(PP_ID %in% pp_specificity_sensitivity$PP_ID) %>%
separate_rows(SeqIDs, sep = ", ")
pp_seqIDs_nontarget <- pp_seqIDs_nontarget_separated %>%
distinct(PP_ID, SeqIDs) %>%
group_by(PP_ID) %>%
summarise(SeqIDs_nontarget = paste(SeqIDs[order(as.numeric(str_extract(SeqIDs, "\\d+")))], collapse = ", "),
N_seqIDs_nontarget = length(unique(SeqIDs)))
# Perform anti join to find sequence IDs detected in target but not in nontarget samples
pp_seqIDs_target_only <- pp_seqIDs_target_separated %>%
anti_join(pp_seqIDs_nontarget_separated, by = c("PP_ID", "SeqIDs")) %>%
group_by(PP_ID) %>%
summarise(seqIDs_target_only = paste(SeqIDs, collapse = ", "))
# Perform anti join to find sequence IDs detected in nontarget but not in target samples
pp_seqIDs_nontarget_only <- pp_seqIDs_nontarget_separated %>%
anti_join(pp_seqIDs_target_separated, by = c("PP_ID", "SeqIDs")) %>%
group_by(PP_ID) %>%
summarise(seqIDs_nontarget_only = paste(SeqIDs, collapse = ", "))
# Join all info
pp_seqIDs_all <- select(pp_specificity_sensitivity, c("PP_ID")) %>%
left_join(pp_all_detected_seqIDs) %>%
left_join(pp_seqIDs_target) %>%
left_join(pp_seqIDs_nontarget) %>%
left_join(pp_seqIDs_target_only) %>%
left_join(pp_seqIDs_nontarget_only) %>%
select("PP_ID", "SeqIDs_all", "seqIDs_target_only", "seqIDs_nontarget_only", "N_seqIDs_target", "N_seqIDs_nontarget") %>%
mutate(File_number = file_number)
######################### Join all info and save it ##########################
# Final results table
full_table <- pp_specificity_sensitivity %>%
left_join(pp_other_parameters_join) %>%
left_join(pp_exceptions_join) %>%
left_join(primers_info) %>%
left_join(amplicon_sizes) %>%
left_join(select(pp_seqIDs_all, c("PP_ID", "N_seqIDs_target"))) %>%
select("PP_ID", "Specificity", "Specificity2",
"Sensitivity", "Sensitivity2", "Sensitivity2_detailed",
"Presence_nontarget_samples",
"Percent_abundance_target", "Percent_abundance_nontarget",
"Percent_abundance_target_detailed", "Percent_abundance_nontarget_detailed",
"Taxonomy_target", "Taxonomy_nontarget", "N_seqIDs_target",
"Positive_target_samples", "Positive_nontarget_samples", "Negative_target_samples",
"Exceptions", "Presence_exceptions_samples", "Percent_abundance_exceptions_detailed",
"Taxonomy_exceptions", "Positive_exceptions_samples",
"PrimerF", "PrimerR",
"TmF_max", "TmR_max",
"TmF_target", "TmF_nontarget",
"TmR_target", "TmR_nontarget",
"MismatchF_target", "MismatchF_nontarget",
"MismatchR_target", "MismatchR_nontarget",
"Amplicon_sizes_target", "Amplicon_sizes_nontarget",
"HeuristicsF", "HeuristicsR")
# Write the full_table
marker_table_output_name_prefix <- paste0(target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff)
write.table(full_table, file = paste0(output_directory_path, "/marker_tables/",
marker_table_output_name_prefix, "_markers", file_number, ".tsv", sep=""),
quote = FALSE,
sep = "\t",
row.names = FALSE,
fileEncoding = "UTF-8")
# Write a table with all sequence IDs detected by selected primer pairs
seqID_table_output_name_prefix <- paste0(target_group_ID, "_",
"msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff)
write.table(pp_seqIDs_all, file = paste0(output_directory_path, "/detected_sequences/",
seqID_table_output_name_prefix, "_seqIDs", file_number, ".tsv", sep=""),
quote = FALSE,
sep = "\t",
row.names = FALSE)
# If the full table is not empty, print a success message, otherwise print a warning
if (nrow(full_table) > 0) {
# If full_table is not empty, print success message
cat(paste0("Tables ", marker_table_output_name_prefix, " and ", seqID_table_output_name_prefix, "were written.\n"))
} else {
# If full_table is empty, print warning message
cat(paste0(filename, " does not contain primer pairs meeting the specified criteria.\n"))
}
# Call the garbage collector to free up unused memory
gc()
}
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
################################################################################
######################## Load variables and parameters #########################
cat("Reading variables.\n")
library(config)
library(ini)
# Read parameters from variables.ini
cat("Reading variables.\n")
variables <- read.ini("scripts/variables.ini")
kmer_sensitivity_cutoff <- as.numeric(variables$settings$kmer_sensitivity_cutoff)
kmer_specificity_cutoff <- as.numeric(variables$settings$kmer_specificity_cutoff)
marker_sensitivity_cutoff <- as.numeric(variables$settings$marker_sensitivity_cutoff)
marker_specificity_cutoff <- as.numeric(variables$settings$marker_specificity_cutoff)
target_list <- strsplit(variables$settings$target, ",")
target <- trimws(unlist(target_list))
target_combined <- paste(target, collapse = " ")
target_group_name <- variables$settings$target_group_name
# Set target_group_ID
if (is.null(target_group_name)  || !nzchar(target_group_name)) {
target_group_ID <- gsub(" ", "-", fixed=TRUE, target_combined)
} else {
target_group_ID <- gsub(" ", "-", fixed=TRUE, target_group_name)
}
# Extract specificity_exception_raw, defaulting to an empty string if it does not exist or is NULL
specificity_exception_raw <- if (!is.null(variables$settings$specificity_exception)) {
variables$settings$specificity_exception
} else {
# Default to an empty string if not available
""
}
# Check if the string specificity_exceptionis not empty
if (nchar(specificity_exception_raw) > 0) {
# Split by comma if there are any commas
specificity_exception <- unlist(strsplit(specificity_exception_raw, ",\\s*"))
} else {
# If the string is empty, set an empty character vector
specificity_exception <- character(0)
}
detach("package:config", unload = TRUE)
detach("package:ini", unload = TRUE)
host_directory_path <-  paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/")
input_directory_path <- paste0(host_directory_path,
"marker_tables",
sep = "")
# Construct the regular expression pattern
pattern <- paste0(target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_markers", "\\d+.tsv")
# Write out a list of files
file_list <- list.files(input_directory_path,
pattern = pattern,
full.names = TRUE)
# start_index (change only, if you want to start the loop from a certain file in the file_list, not from the beginning)
start_index <- 1
if (start_index < 1 || start_index > length(file_list)) {
stop("Invalid start index.")
}
file_list <- file_list[start_index:length(file_list)]
# Set an empty log file
log_file <- paste0(host_directory_path, "log_files/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_final_table.log")
# Initialize an empty data frame to store filtered results
final_results <- data.frame()
counter <- 0
# Loop through the marker files
for (filename in file_list){
counter <- (counter+1)
# Extract file numbers
file_number <- as.numeric(sub(".*markers(\\d+)\\.tsv", "\\1", filename))
# Read results
results_table <- read.table(filename, header = TRUE, sep = "\t")
detected_sequences <- read.table(paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/detected_sequences/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_seqIDs", file_number, ".tsv"),
header = TRUE,
sep = "\t")
results_table$TmF_target <- as.character(results_table$TmF_target)
results_table$TmR_target <- as.character(results_table$TmR_target)
results_table$TmF_nontarget <- as.character(results_table$TmF_nontarget)
results_table$TmR_nontarget <- as.character(results_table$TmR_nontarget)
results_table$Amplicon_sizes_target <- as.character(results_table$Amplicon_sizes_target)
results_table$Amplicon_sizes_nontarget <- as.character(results_table$Amplicon_sizes_nontarget)
results_table$File_number <- file_number
# Append filtered results to the final_results data frame
final_results <- dplyr::bind_rows(final_results, results_table)
cat(paste0("Finished processing file number ", file_number,
"(", round(counter/length(file_list)*100, digits = 2),
"% finished)\n"))
}
file_list_length <- length(file_list)
# Loop through the marker files
for (filename in file_list){
# Loop through the marker files
for (filename in file_list){
counter <- (counter+1)
# Extract file numbers
file_number <- as.numeric(sub(".*markers(\\d+)\\.tsv", "\\1", filename))
# Read results
results_table <- read.table(filename, header = TRUE, sep = "\t")
detected_sequences <- read.table(paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/detected_sequences/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_seqIDs", file_number, ".tsv"),
header = TRUE,
sep = "\t")
results_table$TmF_target <- as.character(results_table$TmF_target)
results_table$TmR_target <- as.character(results_table$TmR_target)
results_table$TmF_nontarget <- as.character(results_table$TmF_nontarget)
results_table$TmR_nontarget <- as.character(results_table$TmR_nontarget)
results_table$Amplicon_sizes_target <- as.character(results_table$Amplicon_sizes_target)
results_table$Amplicon_sizes_nontarget <- as.character(results_table$Amplicon_sizes_nontarget)
results_table$File_number <- file_number
# Append filtered results to the final_results data frame
final_results <- dplyr::bind_rows(final_results, results_table)
cat(paste0("Finished processing file number ", file_number,
"(progress: ", counter, "/", file_list_length, ")"))
}
counter <- 0
file_list_length <- length(file_list)
# Loop through the marker files
for (filename in file_list){
counter <- (counter+1)
# Extract file numbers
file_number <- as.numeric(sub(".*markers(\\d+)\\.tsv", "\\1", filename))
# Read results
results_table <- read.table(filename, header = TRUE, sep = "\t")
detected_sequences <- read.table(paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/detected_sequences/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_seqIDs", file_number, ".tsv"),
header = TRUE,
sep = "\t")
results_table$TmF_target <- as.character(results_table$TmF_target)
results_table$TmR_target <- as.character(results_table$TmR_target)
results_table$TmF_nontarget <- as.character(results_table$TmF_nontarget)
results_table$TmR_nontarget <- as.character(results_table$TmR_nontarget)
results_table$Amplicon_sizes_target <- as.character(results_table$Amplicon_sizes_target)
results_table$Amplicon_sizes_nontarget <- as.character(results_table$Amplicon_sizes_nontarget)
results_table$File_number <- file_number
# Append filtered results to the final_results data frame
final_results <- dplyr::bind_rows(final_results, results_table)
cat(paste0("Finished processing file number ", file_number,
"(progress: ", counter, "/", file_list_length, ")\n"))
}
# Initialize an empty data frame to store filtered results
final_results <- data.frame()
counter <- 0
# Loop through the marker files
for (filename in file_list){
counter <- (counter+1)
# Extract file numbers
file_number <- as.numeric(sub(".*markers(\\d+)\\.tsv", "\\1", filename))
# Read results
results_table <- read.table(filename, header = TRUE, sep = "\t")
detected_sequences <- read.table(paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/detected_sequences/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_seqIDs", file_number, ".tsv"),
header = TRUE,
sep = "\t")
results_table$TmF_target <- as.character(results_table$TmF_target)
results_table$TmR_target <- as.character(results_table$TmR_target)
results_table$TmF_nontarget <- as.character(results_table$TmF_nontarget)
results_table$TmR_nontarget <- as.character(results_table$TmR_nontarget)
results_table$Amplicon_sizes_target <- as.character(results_table$Amplicon_sizes_target)
results_table$Amplicon_sizes_nontarget <- as.character(results_table$Amplicon_sizes_nontarget)
results_table$File_number <- file_number
# Append filtered results to the final_results data frame
final_results <- dplyr::bind_rows(final_results, results_table)
cat(paste0("Finished processing file number ", file_number,
" (progress:", counter, "/", file_list_length, ")\n"))
}
counter <- 0
# Loop through the marker files
for (filename in file_list){
counter <- (counter+1)
# Extract file numbers
file_number <- as.numeric(sub(".*markers(\\d+)\\.tsv", "\\1", filename))
# Read results
results_table <- read.table(filename, header = TRUE, sep = "\t")
detected_sequences <- read.table(paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/detected_sequences/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_seqIDs", file_number, ".tsv"),
header = TRUE,
sep = "\t")
results_table$TmF_target <- as.character(results_table$TmF_target)
results_table$TmR_target <- as.character(results_table$TmR_target)
results_table$TmF_nontarget <- as.character(results_table$TmF_nontarget)
results_table$TmR_nontarget <- as.character(results_table$TmR_nontarget)
results_table$Amplicon_sizes_target <- as.character(results_table$Amplicon_sizes_target)
results_table$Amplicon_sizes_nontarget <- as.character(results_table$Amplicon_sizes_nontarget)
results_table$File_number <- file_number
# Append filtered results to the final_results data frame
final_results <- dplyr::bind_rows(final_results, results_table)
cat(paste0("Finished processing file number ", file_number,
" (progress:", counter/file_list_length, "%)\n"))
}
counter <- 0
# Loop through the marker files
for (filename in file_list){
counter <- (counter+1)
# Extract file numbers
file_number <- as.numeric(sub(".*markers(\\d+)\\.tsv", "\\1", filename))
# Read results
results_table <- read.table(filename, header = TRUE, sep = "\t")
detected_sequences <- read.table(paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/detected_sequences/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_seqIDs", file_number, ".tsv"),
header = TRUE,
sep = "\t")
results_table$TmF_target <- as.character(results_table$TmF_target)
results_table$TmR_target <- as.character(results_table$TmR_target)
results_table$TmF_nontarget <- as.character(results_table$TmF_nontarget)
results_table$TmR_nontarget <- as.character(results_table$TmR_nontarget)
results_table$Amplicon_sizes_target <- as.character(results_table$Amplicon_sizes_target)
results_table$Amplicon_sizes_nontarget <- as.character(results_table$Amplicon_sizes_nontarget)
results_table$File_number <- file_number
# Append filtered results to the final_results data frame
final_results <- dplyr::bind_rows(final_results, results_table)
cat(paste0("Finished processing file number ", file_number,
" (progress:", round(counter/file_list_length*100, digits = 0), "%)\n"))
}
# Loop through the marker files
for (filename in file_list){
counter <- (counter+1)
# Extract file numbers
file_number <- as.numeric(sub(".*markers(\\d+)\\.tsv", "\\1", filename))
# Read results
results_table <- read.table(filename, header = TRUE, sep = "\t")
detected_sequences <- read.table(paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/detected_sequences/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_seqIDs", file_number, ".tsv"),
header = TRUE,
sep = "\t")
results_table$TmF_target <- as.character(results_table$TmF_target)
results_table$TmR_target <- as.character(results_table$TmR_target)
results_table$TmF_nontarget <- as.character(results_table$TmF_nontarget)
results_table$TmR_nontarget <- as.character(results_table$TmR_nontarget)
results_table$Amplicon_sizes_target <- as.character(results_table$Amplicon_sizes_target)
results_table$Amplicon_sizes_nontarget <- as.character(results_table$Amplicon_sizes_nontarget)
results_table$File_number <- file_number
# Append filtered results to the final_results data frame
final_results <- dplyr::bind_rows(final_results, results_table)
cat(paste0("Finished processing file number ", file_number,
" (progress:", round(counter/file_list_length*100, digits = 2), "%)\n"))
}
# Loop through the marker files
for (filename in file_list){
counter <- (counter+1)
# Extract file numbers
file_number <- as.numeric(sub(".*markers(\\d+)\\.tsv", "\\1", filename))
# Read results
results_table <- read.table(filename, header = TRUE, sep = "\t")
detected_sequences <- read.table(paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/detected_sequences/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_seqIDs", file_number, ".tsv"),
header = TRUE,
sep = "\t")
results_table$TmF_target <- as.character(results_table$TmF_target)
results_table$TmR_target <- as.character(results_table$TmR_target)
results_table$TmF_nontarget <- as.character(results_table$TmF_nontarget)
results_table$TmR_nontarget <- as.character(results_table$TmR_nontarget)
results_table$Amplicon_sizes_target <- as.character(results_table$Amplicon_sizes_target)
results_table$Amplicon_sizes_nontarget <- as.character(results_table$Amplicon_sizes_nontarget)
results_table$File_number <- file_number
# Append filtered results to the final_results data frame
final_results <- dplyr::bind_rows(final_results, results_table)
cat(paste0("Finished processing file number ", file_number,
" (progress:", counter/file_list_length, "%)", file_list_length, ")\n"))
}
file_list_length <- length(file_list)
# Initialize an empty data frame to store filtered results
final_results <- data.frame()
counter <- 0
# Loop through the marker files
for (filename in file_list){
counter <- (counter+1)
# Extract file numbers
file_number <- as.numeric(sub(".*markers(\\d+)\\.tsv", "\\1", filename))
# Read results
results_table <- read.table(filename, header = TRUE, sep = "\t")
detected_sequences <- read.table(paste0("out/", target_group_ID,
"/sens", kmer_sensitivity_cutoff,
"_spec", kmer_specificity_cutoff,
"/detected_sequences/",
target_group_ID,
"_msens", marker_sensitivity_cutoff,
"_mspec", marker_specificity_cutoff,
"_seqIDs", file_number, ".tsv"),
header = TRUE,
sep = "\t")
results_table$TmF_target <- as.character(results_table$TmF_target)
results_table$TmR_target <- as.character(results_table$TmR_target)
results_table$TmF_nontarget <- as.character(results_table$TmF_nontarget)
results_table$TmR_nontarget <- as.character(results_table$TmR_nontarget)
results_table$Amplicon_sizes_target <- as.character(results_table$Amplicon_sizes_target)
results_table$Amplicon_sizes_nontarget <- as.character(results_table$Amplicon_sizes_nontarget)
results_table$File_number <- file_number
# Append filtered results to the final_results data frame
final_results <- dplyr::bind_rows(final_results, results_table)
cat(paste0("Finished processing file number ", file_number,
" (progress:", counter, "/", file_list_length, ")\n"))
}
reticulate::repl_python()
