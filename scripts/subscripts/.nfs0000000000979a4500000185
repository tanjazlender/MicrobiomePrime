# This script performs in silico PCR on sequences from the 'sequence_singleline.fa' file
# using the primer pairs generated by our primer design process.

#!/bin/bash

# Source variables
echo "Reading variables."

target_group_name=$(awk -F= '/target_group_name/ {gsub(/ /, "-", $2); print $2}' variables.ini)
sensitivity=$(awk -F= '/kmer_sensitivity_cutoff/ {print $2}' variables.ini)
specificity=$(awk -F= '/kmer_specificity_cutoff/ {print $2}' variables.ini)

target1=$(awk -F= '/target1/ {print $2}' variables.ini)
target2=$(awk -F= '/target2/ {print $2}' variables.ini)
target3=$(awk -F= '/target3/ {print $2}' variables.ini)
target4=$(awk -F= '/target4/ {print $2}' variables.ini)
target5=$(awk -F= '/target5/ {print $2}' variables.ini)

# Check if target_group_name is empty; set the target_group_name to target1 if necessary
if [ -z "$target_group_name" ] && [ -z "$target2" ] && [ -z "$target3" ] && [ -z "$target4" ] && [ -z "$target5" ]; then
  # Set target_group_name to target1
  target_group_name=$target1
fi

# Read in silico PCR settings
echo "Reading in silico PCR settings."

cpus=$(awk -F= '/cpus/ {print $2}' settings.ini)
max_amplicon_length=$(awk -F= '/max_amplicon_length/ {print $2}' settings.ini)
min_primer_tm=$(awk -F= '/min_primer_tm/ {print $2}' settings.ini)
max_primer_tm=$(awk -F= '/max_primer_tm/ {print $2}' settings.ini)
max_primer_delta=$(awk -F= '/max_primer_delta/ {print $2}' settings.ini)
min_primer_delta=$(awk -F= '/min_primer_delta/ {print $2}' settings.ini)
primer_clamp=$(awk -F= '/primer_clamp/ {print $2}' settings.ini)
max_mismatch=$(awk -F= '/max_mismatch/ {print $2}' settings.ini)

# Set file paths and read the FASTA file
echo "Setting file paths."

file_path="../out/${target_group_name}/sens${sensitivity}_spec${specificity}"
tntblast_path=$(awk -F= '/tntblast_path/ {print $2}' settings.ini)

echo "Reading the PCR template FASTA file."
singleline_fasta="../data/generated_files/sequences/fasta_files/sequences_singleline.fa"

# Set a prefix for the output file
prefix="${target_group_name}_sens${sensitivity}_spec${specificity}"

# Construct optional parameters
echo "Reading optional PCR parameters."

optional_parameters=""
if [ ! -z "$max_amplicon_length" ]; then
    optional_parameters+=" -l $max_amplicon_length"
fi

if [ ! -z "$min_primer_tm" ]; then
    optional_parameters+=" -e $min_primer_tm"
fi

if [ ! -z "$max_primer_tm" ]; then
    optional_parameters+=" -x $max_primer_tm"
fi

if [ ! -z "$max_primer_delta" ]; then
    optional_parameters+=" -g $max_primer_delta"
fi

if [ ! -z "$min_primer_delta" ]; then
    optional_parameters+=" -z $min_primer_delta"
fi

if [ ! -z "$primer_clamp" ]; then
    optional_parameters+=" --primer-clamp $primer_clamp"
fi

if [ ! -z "$max_mismatch" ]; then
    optional_parameters+=" --max-mismatch $max_mismatch"
fi

# Run ThermonucleotideBLAST on the split primer pair files
echo "Running Thermonucleotide BLAST."

for input_file in "${file_path}/primers/split_primer_pairs/${prefix}_primers"[0-9]*.txt; do
    
    number=$(echo "$input_file" | grep -oP '[0-9]+(?=.txt)')
    output_file="${file_path}/tntblast/${prefix}_results${number}.txt"
    
    # Run thermonucleotideBLAST
    mpirun -np ${cpus} ${tntblast_path} -i ${input_file} -o ${output_file} -D ${singleline_fasta}$optional_parameters
    
    if [ $? -eq 0 ]; then
        echo "Finished processing ${input_file}. Results saved to ${output_file}."
    else
        echo -e "ERROR: Running in silico PCR failed on input file =  ${input_file}"
        exit 1  # Exit immediately
    fi
done

echo -e "\nDONE: The script has completed successfully."