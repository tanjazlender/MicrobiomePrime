#!/bin/bash
#SBATCH --nodelist=heracpu01.nlzoh.si
#SBATCH --job-name=tnt
#SBATCH --tasks=245
#SBATCH --time=15-24:00:00
#SBATCH --cpus-per-task=1
#SBATCH --mem=150
#SBATCH --output=../sb_execution.log

# Define current log file path and create the main output folder for a given target
current_log_path="../current_logs"

# Create a list of sequence IDs found in target samples
Rscript 01.write_target_seqIDs.R > ${current_log_path}/01.write_target_seqIDs.log 2>&1
 
# Extract FASTA sequences based on the list of sequence IDs
python 02.extract_fasta_files.py > ${current_log_path}/02.extract_fasta_files.log 2>&1

# Organize directories
bash 04.organize_directories.sh > ${current_log_path}/04.organize_directories.log 2>&1 

# Generate primers
Rscript 05.generate_primers.R > ${current_log_path}/05.generate_primers.log 2>&1

# Generate primer pairs
python 06.generate_PPs.py > ${current_log_path}/06.generate_PPs.log 2>&1

# Split the list of primer pairs into multiple files (otherwise the tntblast output files are too large)
bash 07.split_PP_lists.sh > ${current_log_path}/07.split_PP_lists.log 2>&1

# Run ThermonucleotideBLAST
bash 08.run_tntblast.sh > ${current_log_path}/08.run_tntblast.log 2>&1

# Generate a table out of ThermonucleotideBLAST output
python 09.rearrange_tntblast_output.py > ${current_log_path}/09.rearrange_tntblast_output.log 2>&1

# Calculate the sensitivity and specificity of primer pairs (PPs)
Rscript 10.calculate_sensitivity_specificity.R > ${current_log_path}/10.calculate_sensitivity_specificity.log 

# Generate the results table
Rscript 11.join_all_results.R > ${current_log_path}/11.join_all_results.log 2>&1

# Read the variables
sensitivity=$(awk -F= '/kmer_sensitivity_cutoff/ {print $2}' ../variables.ini)
specificity=$(awk -F= '/kmer_specificity_cutoff/ {print $2}' ../variables.ini)

target_group_name=$(awk -F= '/target_group_name/ {gsub(/ /, "-", $2); print $2}' ../variables.ini)
target1=$(awk -F= '/target1/ {print $2}' ../variables.ini)
target2=$(awk -F= '/target2/ {print $2}' ../variables.ini)
target3=$(awk -F= '/target3/ {print $2}' ../variables.ini)
target4=$(awk -F= '/target4/ {print $2}' ../variables.ini)
target5=$(awk -F= '/target5/ {print $2}' ../variables.ini)

# Check if target_group_name is empty; set the target_group_name to target1 if necessary
if [ -z "$target_group_name" ] && [ -z "$target2" ] && [ -z "$target3" ] && [ -z "$target4" ] && [ -z "$target5" ]; then
  # Set target_group_name to target1
  target_group_name=$target1  
fi

# Define log file path and create the main output folder for a given target
final_log_path="../../out/${target_group_name}/sens${sensitivity}_spec${specificity}/log_files"


# Move all files from current_log_path to final_log_path
for file in "$current_log_path"/*; do
    mv "$file" "$final_log_path"
    echo "Moved: $file to $final_log_path"
done

